#!/bin/bash
#
# Usage: ./domaingen [IP]
#
# Description:
#   This script generates a domain name based on either the public IP address of the machine or a custom IP address.
#
# Examples:
#   ./domaingen            # Generates a domain name based on the public IP address
#   ./domaingen 127.0.0.1  # Generates a domain name based on the custom IP address

validate_ip() {
    local ip=$1
    local stat=1

    if [[ $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS

        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi

    return $stat
}

get_domain() {
    # Get the public IP address of the machine
    address_ip=$(curl -s ipv4.ip.sb)
    
    # Convert the IP address to a long number
    long_number=$(echo "$address_ip" | awk -F. '{printf "%u\n", $4 * 256^3 + $3 * 256^2 + $2 * 256 + $1}')
    
    # Output the generated domain name
    echo "ip$long_number.mobgslb.tbcache.com"
}

get_custom_domain() {
    custom_ip=$1

    # Check if the custom IP is a valid IPv4 address using the validate_ip function
    if ! validate_ip "$custom_ip"; then
        echo "Please enter a valid IP address"
        exit 1
    fi

    # Convert the custom IP address to a long number
    long_number=$(echo "$custom_ip" | awk -F. '{printf "%u\n", $4 * 256^3 + $3 * 256^2 + $2 * 256 + $1}')
    
    # Output the generated domain name
    echo "ip$long_number.mobgslb.tbcache.com"
}

# If there is a parameter, use the custom IP; otherwise, get the public IP of the machine
if [ $# -eq 1 ]; then
    get_custom_domain "$1"
else
    get_domain
fi
